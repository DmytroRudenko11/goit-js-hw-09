{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAwCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAhDMQ,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAqBC,GACnBA,EAAEC,iBACF,IAEMC,EAAQC,OAAOH,EAAEI,OAAOf,MAAMgB,OAC9BC,EAAOH,OAAOH,EAAEI,OAAOE,KAAKD,OAC5BE,EAASJ,OAAOH,EAAEI,OAAOG,OAAOF,OAEtC,GAAIH,EAAQ,EACV,OAAOM,EAAAvB,GAASwB,OAAOC,QACrB,uDAEG,GAAI,GAAKH,EACd,OAAOC,EAAAvB,GAASwB,OAAOC,QACrB,+CAIJ,IAAK,IAAIC,EAAI,EAAGA,EAAIJ,EAAQI,IAG1BxB,EAAcwB,EAAI,EAFHT,EAAQI,EAAOK,GAG3BC,MAAK,SAAAC,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MACjBmB,EAAAvB,GAASwB,OAAOK,QACd,uBAAwCC,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M,IAGjD2B,OAAM,SAAAH,G,IAAGzB,EAAQyB,EAARzB,SAAUC,EAAKwB,EAALxB,MAClBmB,EAAAvB,GAASwB,OAAOC,QACd,sBAAqCK,OAAf3B,EAAS,QAAY2B,OAAN1B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', dataHandler);\n\nfunction dataHandler(e) {\n  e.preventDefault();\n  let currentDelay = 0;\n\n  const delay = Number(e.target.delay.value);\n  const step = Number(e.target.step.value);\n  const amount = Number(e.target.amount.value);\n\n  if (delay < 0) {\n    return Notiflix.Notify.failure(\n      'Value for first step should be positive or equal 0!'\n    );\n  } else if (0 >= amount) {\n    return Notiflix.Notify.failure(\n      'Amount of promises should be higher then 0!'\n    );\n  }\n\n  for (let i = 0; i < amount; i++) {\n    currentDelay = delay + step * i;\n\n    createPromise(i + 1, currentDelay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","delay1","Number","target","value","step","amount","$parcel$interopDefault","Notify","failure","i","then","param","success","concat","catch"],"version":3,"file":"03-promises.bf3e9cf0.js.map"}