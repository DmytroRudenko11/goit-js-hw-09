{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAIMQ,SAASC,cAAc,SAC/BC,iBAAiB,UAEtB,SAAqBC,GACnBA,EAAEC,iBACF,IAAIC,EAAe,EAIAC,EAAfH,EAAEI,cADJC,SAAYC,EAAKH,EAALd,MAAOkB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAG3B,GAAIC,OAAOH,EAAMI,OAAS,EACxB,OAAOC,EAAA1B,GAAS2B,OAAOC,QACrB,uDAEG,GAAI,GAAKJ,OAAOD,EAAOE,OAC5B,OAAOC,EAAA1B,GAAS2B,OAAOC,QACrB,+CAIJ,IAAK,IAAIC,EAAI,EAAGA,GAAKL,OAAOD,EAAOE,OAAS,EAAGI,IAC7CZ,EAAeO,OAAOH,EAAMI,OAASD,OAAOF,EAAKG,OAASI,EAC1DC,QAAQC,IACN7B,EAAc2B,EAAI,EAAGZ,GAClBe,MAAK,SAAAC,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MACjBsB,EAAA1B,GAAS2B,OAAOO,QACd,uBAAwCC,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,M,IAGjDgC,OAAM,SAAAH,G,IAAG9B,EAAQ8B,EAAR9B,SAAUC,EAAK6B,EAAL7B,MAClBsB,EAAA1B,GAAS2B,OAAOC,QACd,sBAAuCO,OAAfhC,EAAS,QAAYgC,OAAN/B,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\nform.addEventListener('submit', dataHandler);\n\nfunction dataHandler(e) {\n  e.preventDefault();\n  let currentDelay = 0;\n\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n\n  if (Number(delay.value) < 0) {\n    return Notiflix.Notify.failure(\n      'Value for first step should be positive or equal 0!'\n    );\n  } else if (0 >= Number(amount.value)) {\n    return Notiflix.Notify.failure(\n      'Amount of promises should be higher then 0!'\n    );\n  }\n\n  for (let i = 0; i <= Number(amount.value) - 1; i++) {\n    currentDelay = Number(delay.value) + Number(step.value) * i;\n    console.log(\n      createPromise(i + 1, currentDelay)\n        .then(({ position, delay }) => {\n          Notiflix.Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms`\n          );\n        })\n        .catch(({ position, delay }) => {\n          Notiflix.Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms`\n          );\n        })\n    );\n  }\n}\n\n// createPromise(2, 1500)\n//   .then(({ position, delay }) => {\n//     console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//     console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n//   });\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","document","querySelector","addEventListener","e","preventDefault","currentDelay","_elements","currentTarget","elements","delay1","step","amount","Number","value","$parcel$interopDefault","Notify","failure","i","console","log","then","param","success","concat","catch"],"version":3,"file":"03-promises.637301b1.js.map"}